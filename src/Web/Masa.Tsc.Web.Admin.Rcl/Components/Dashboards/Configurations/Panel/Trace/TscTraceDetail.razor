@namespace Masa.Tsc.Web.Admin.Rcl.Components
@inherits TscComponentBase

<SSheetDialog Value="_dialogValue" ValueChanged="DialogValueChanged" Title="@_rootTreeItem?.Resource["service.name"]?.ToString()">
    <div class="d-flex">
        <div class="pa-12" style="width:100%">
            <div class="d-flex mb-6">
                <SearchTextField FullWidth Small Clearable Class="my-auto mr-6" Style="max-width:300px" />
                <MSpacer></MSpacer>
                @if (_rootTreeItem is not null)
                {
                    <div class="d-flex align-center">
                        <div class="mr-6">
                            <MChip Label Small Color="emphasis2 mr-3" Dark>@T("Start")</MChip>
                            <span class="regular--text">@_rootTreeItem.Timestamp</span>
                        </div>
                        <div class="mr-6">
                            <MChip Label Small Color="emphasis2 mr-3" Dark>@T("Duration")</MChip>
                            <span class="regular--text">@FormatDuration(_rootTreeItem.DoubleDuration)</span>
                        </div>
                        <div>
                            <MChip Label Small Color="emphasis2 mr-3" Dark>@T("Span Count")</MChip>
                            <span class="regular--text">@_count</span>
                        </div>
                    </div>
                }
            </div>

            <div class="mb-6">
                @foreach (var timelines in _timelinesView)
                {
                    double sumOfMarginLeft = 0;

                    <div class="trace-timelines mb-2">
                        @foreach (var timeline in timelines)
                        {
                            if (timeline.marginLeft > 0)
                            {
                                var marginLeft = timeline.marginLeft - sumOfMarginLeft;
                                sumOfMarginLeft += timeline.marginLeft + timeline.Percent;

                                <div style="width: @(marginLeft * 100)%"></div>
                            }

                            <div class="trace-timeline__section" style="width: @(timeline.Percent * 100)%;">
                                <div class="trace-timeline__background">
                                    <div class="trace-timeline__leaner @(timeline.Render ? "" : "d-none")"></div>
                                </div>
                            </div>
                        }
                    </div>
                }

                @if (_rootTreeItem is not null)
                {
                    var scale = Math.Ceiling(_rootTreeItem.Duration / 5d);

                    <div class="trace-timelines-view">
                        <div class="trace-timelines-view__line">
                            <div class="trace-timelines-view__line-item body2" style="left: 0;">0</div>
                            @if (_rootTreeItem.Duration >= 5)
                            {
                                <div class="trace-timelines-view__line-item body2" style="left: 20%;">@(FormatDuration(scale * 1))</div>
                                <div class="trace-timelines-view__line-item body2" style="left: 40%;">@(FormatDuration(scale * 2))</div>
                                <div class="trace-timelines-view__line-item body2" style="left: 60%;">@(FormatDuration(scale * 3))</div>
                                <div class="trace-timelines-view__line-item body2" style="left: 80%;">@(FormatDuration(scale * 4))</div>
                            }
                            <div class="trace-timelines-view__line-item body2" style="right: 0;">@FormatDuration(_rootTreeItem.DoubleDuration)</div>
                        </div>
                    </div>
                }
            </div>

            <MTreeview Items="@_treeData"
                       ItemChildren="item => item.Children"
                       ItemText="item => item.Name"
                       ItemKey="item => item.SpanId"
                       TItem="TraceResponseTree"
                       TKey="string"
                       OpenAll
                       Activatable
                       @bind-Active="_actives"
                       OnActiveUpdate="OnActiveUpdate"
                       Class="flex-fill overflow-y-auto"
                       Style='@($"height: calc(100vh - {_timelinesView.Count * 20 + 254}px)")'
                       @key="@_treeData">
                <ChildContent>
                    <MCard Width="500" Style="margin: 0 auto">
                        <MVirtualScroll Height="250" Items="_treeData" @ref="_vs" TItem="TraceResponseTree">
                            <ItemContent>
                                <MListItem Dense>
                                    <MListItemContent>
                                        <div class="d-flex align-center">
                                            @{
                                                int level = context.Level - 1;

                                                <div style="min-width:calc(542px - @(level * 24)px)">
                                                    @context.Name
                                                    @{
                                                        if (context.Resource.ContainsKey("service.name"))
                                                        {
                                                            <div>
                                                                @context.Resource["service.name"]
                                                                @((RenderFragment)(labelBuilder => RenderItemLabel(labelBuilder, context)))
                                                            </div>
                                                        }
                                                    }
                                                </div>
                                            }
                                            <div class="trace-timelines">
                                                @foreach (var timeline in context.Timelines)
                                                {
                                                    if (timeline.marginLeft > 0)
                                                    {
                                                        <div style="width: @(timeline.marginLeft * 100)%"></div>
                                                    }
                                                    <div class="trace-timeline__section" style="width: @(timeline.Percent * 100)%;">
                                                        <div class="trace-timeline__background">
                                                            <div class="trace-timeline__leaner @(timeline.Render ? "" : "d-none")"></div>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                            <div class="d-inline-block ml-2" style="min-width: 52px;">
                                                @FormatDuration(context.DoubleDuration)
                                            </div>
                                        </div>
                                    </MListItemContent>
                                </MListItem>
                            </ItemContent>
                        </MVirtualScroll>
                    </MCard>
                </ChildContent>
            </MTreeview>
        </div>

        <MDivider Vertical Class="mx-0" Style="height:100vh" />

        @if (_activeTreeItem is not null)
        {
            var detail = _activeTreeItem.ToDictionary(nameof(TraceResponseTree.Children), nameof(TraceResponseTree.Attributes), nameof(TraceResponseTree.Resource), nameof(TraceResponseTree.Timelines), nameof(TraceResponseTree.Level), nameof(TraceResponseTree.DoubleDuration));

            var key = nameof(TraceResponseTree.Duration);
            if (detail.ContainsKey(key))
                detail[key] = FormatDuration(_activeTreeItem.DoubleDuration);

            <div class="pa-12" style="width:430px">
                <MList Dense Class="emphasis2 mb-4 rounded" Dark>
                    <MListItem Dense>
                        <MListItemContent>
                            <MListItemTitle>SelfDuration</MListItemTitle>
                        </MListItemContent>
                        <MListItemAction>
                            <MListItemActionText>
                                @FormatDuration(_activeTreeItem.DoubleDuration)
                            </MListItemActionText>
                        </MListItemAction>
                    </MListItem>
                    <MListItem Dense>
                        <MListItemContent>
                            <MListItemTitle>TotalDuration</MListItemTitle>
                        </MListItemContent>
                        <MListItemAction>
                            <MListItemActionText>
                                @FormatDuration(_rootTreeItem!.DoubleDuration)
                            </MListItemActionText>
                        </MListItemAction>
                    </MListItem>
                </MList>
                <div>
                    <MTabs Value="_tabValue" ValueChanged="OnTabValueChange" FixedTabs ShowArrows="false">
                        <MTab>attr(@_activeTreeItem.Attributes.Count)</MTab>
                        <MTab>res(@_activeTreeItem.Resource.Count)</MTab>
                        <MTab>dt(@detail.Count)</MTab>
                        <MTab>logs(@_logs.Count)</MTab>
                    </MTabs>
                    <MTabsItems @bind-Value="_tabValue">
                        <MTabItem>
                            @((RenderFragment)(dictRender => RenderDictionary(dictRender, _activeTreeItem.Attributes)))
                        </MTabItem>
                        <MTabItem>
                            @((RenderFragment)(dictRender => RenderDictionary(dictRender, _activeTreeItem.Resource)))
                        </MTabItem>
                        <MTabItem>
                            @((RenderFragment)(dictRender => RenderDictionary(dictRender, detail)))
                        </MTabItem>
                        <MTabItem>
                            <MCard Style="overflow-x-hidden" Height="600">
                                <MVirtualScroll OverscanCount=5 TItem="LogModel" Items="_logs" Class="m-sheet theme--light" Style="width:100% !important">
                                    <ItemContent>
                                        <div class="d-flex">
                                            <div>
                                                <LogView Small JsonObject="context.ExtensionData" />
                                            </div>
                                        </div>
                                        @if (_logs != null && !_logs.Last().Equals(context))
                                        {
                                            <MDivider Class="mb-6" />
                                        }
                                    </ItemContent>
                                </MVirtualScroll>
                            </MCard>
                        </MTabItem>
                    </MTabsItems>
                </div>
            </div>
        }

    </div>
</SSheetDialog>

@code {
    private void RenderItemLabel(RenderTreeBuilder __builder, TraceResponseTree item)
    {
        const string dbKey = "db.system";
        const string httpKey = "http.method";

        string? label = null;
        if (item.Attributes.ContainsKey(dbKey))
        {
            label = item.Attributes[dbKey].ToString();
        }
        else if (item.Attributes.ContainsKey(httpKey))
        {
            // label = item.Attributes[httpKey].ToString();
            label = "HTTP";
        }

        if (label is null)
        {
            return;
        }

        <MChip Label XSmall Class="ml-1" Color="#05CD99" Dark>@label</MChip>
    }

    private void RenderDictionary(RenderTreeBuilder __builder, IDictionary<string, object> dictionary)
    {
        @foreach (var item in dictionary)
        {
            string value;
            if (item.Value is DateTime _value)
            {
                value = _value.ToString("yyyy/MM/dd HH:mm:ss.fff");
            }
            else
            {
                value = item.Value.ToString();
            }

            <MListItem Class="pa-0">
                <MListItemContent>
                    <MListItemTitle>@item.Key</MListItemTitle>
                </MListItemContent>
                <MListItemAction Style="max-width: 38%">
                    <MListItemActionText Class="text-truncate text-right masa body-2"
                             Style="width: 100%; cursor: auto;">
                        <MHover Context="hContext">
                            <div @attributes="hContext.Attrs" class="hover-pointer d-flex align-center">                                
                                <div @onclick="() => Copy(value)" @onclick:stopPropagation>
                                    <SIcon Tooltip="@T("Copy value")"
                               Color="@(_copyClicked ? "success" : "gray")"
                               Style="@(hContext.Hover ? "width: 18px; height: 18px; margin-right: 12px; transition: 0.5s;" : "opacity:0; width: 18px; height: 0px; margin-left: -24px; transition: 0.4s;")">
                                        @(_copyClicked ? _checkSvg : _copySvg)
                                    </SIcon>
                                </div>
                                <MTooltip Top>
                                    <ActivatorContent>
                                        <span class="mr-2" @attributes="@context.Attrs">@value</span>
                                    </ActivatorContent>
                                    <ChildContent>
                                        <span>@value</span>
                                    </ChildContent>
                                </MTooltip>
                            </div>
                        </MHover>                        
                    </MListItemActionText>
                </MListItemAction>
            </MListItem>
        }
    }

}
