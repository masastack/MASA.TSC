@namespace Masa.Tsc.Web.Admin.Rcl.Components
@using System.Timers;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@implements IDisposable
@inject I18n I18n

<div class="d-inline-flex align-center rounded-lg px-4 @Class"
     style="border:1px solid #E4E8F3; height: 40px; background-color:white;">
    <DateTimeRangePicker @bind-StartDateTime="_startDateTime"
                         StartTimeLimit="StartTimeLimit"
                         EndTimeLimit="EndTimeLimit"
                         @bind-EndDateTime="_endDateTime"
                         OnConfirm="OnAbsoluteDateTimeUpdated" OnTimeZoneInfoChange="OnTimeZoneInfoChange" />

    <MDivider Vertical Class="mx-2"></MDivider>

    <Dropdown @bind-Value="_selectedQuickRangeKey"
              Items="_quickRangeItems"
              ItemText="item => I18n.T(item.Key.ToString())"
              ItemValue="item => item.Key"
              ItemDisabled="item => item.Disabled"
              TItem="QuickRange"
              TValue="QuickRangeKey"
              OnItemClick="OnRelatedTimeSpanSelected"
              OffsetY
              NudgeBottom="@((StringNumber)8)">
        <ActivatorContent>
            <MButton Small @attributes="@context.Attrs" Text>
                @I18n.T(_selectedQuickRangeKey.ToString())
                <MIcon Right>mdi-menu-down</MIcon>
            </MButton>
        </ActivatorContent>
    </Dropdown>

    <MDivider Vertical Class="mx-2" />

    <Dropdown Items="_intervalList"
              ItemValue="item => item.Text"
              ItemText="item => I18n.T(item.Text)"
              @bind-Value="_interval"
              TItem="IntervalItem"
              TValue="string"
              OnItemClick="OnIntervalSelected">
        <PrependContent>
            <MButton Icon Small OnClick="Refresh">
                <MIcon Small>mdi-refresh</MIcon>
            </MButton>
        </PrependContent>
        <ActivatorContent>
            @{
                var exists = _interval is not null;
                <MButton Text Small Icon="!exists"
                         @attributes="@context.Attrs">
                    <span class="mr-1">@I18n.T(_interval)</span>
                    <MIcon Small Right="@exists">mdi-menu-down</MIcon>
                </MButton>
            }
        </ActivatorContent>
    </Dropdown>
</div>

@code {

    [Parameter]
    public QuickRangeKey? DefaultQuickRange { get; set; }

    [Parameter]
    public TimeSpan Offset { get; set; }

    [Parameter]
    public EventCallback<(DateTimeOffset, DateTimeOffset)> OnUpdate { get; set; }

    [Parameter]
    public EventCallback<(DateTimeOffset, DateTimeOffset)> OnAutoUpdate { get; set; }

    [Parameter]
    public EventCallback<TimeZoneInfo> OnTimeZoneUpdate { get; set; }

    [Parameter]
    public Func<DateOnly, DateOnly, bool> StartTimeLimit { get; set; }

    [Parameter]
    public Func<DateOnly, DateOnly, bool> EndTimeLimit { get; set; }

    [Parameter]
    public string Class { get; set; }

    [Parameter]
    public DateTimeOffset StartDateTime
    {
        get => _startDateTime;
        set => _startDateTime = value;
    }

    [Parameter]
    public DateTimeOffset EndDateTime
    {
        get => _endDateTime;
        set => _endDateTime = value;
    }

    [Inject]
    public ProtectedLocalStorage LocalStrorage { get; set; }

    [Inject]
    public IUserContext UserContext { get; set; }

    [Inject]
    public JsInitVariables JsInitVariables { get; set; }

    private static readonly QuickRange s_internalDefaultQuickRange = new(QuickRangeKey.Last12Hours, TimeSpan.FromHours(-12));

    private Timer? _timer;
    private DateTimeOffset _startDateTime;
    private DateTimeOffset _endDateTime;
    private QuickRangeKey _selectedQuickRangeKey = QuickRangeKey.Off;
    private QuickRange _quickRange = s_internalDefaultQuickRange;
    private string? _interval = "Off";

    private List<QuickRange> _quickRangeItems = new()
    {
        new QuickRange(QuickRangeKey.Last5Minutes, TimeSpan.FromMinutes(-5)),
        new QuickRange(QuickRangeKey.Last15Minutes, TimeSpan.FromMinutes(-15)),
        new QuickRange(QuickRangeKey.Last30Minutes, TimeSpan.FromMinutes(-30)),
        new QuickRange(QuickRangeKey.Last1Hour, TimeSpan.FromHours(-1)),
        new QuickRange(QuickRangeKey.Last3Hours, TimeSpan.FromHours(-3)),
        new QuickRange(QuickRangeKey.Last6Hours, TimeSpan.FromHours(-6)),
        s_internalDefaultQuickRange,
        new QuickRange(QuickRangeKey.Last24Hours, TimeSpan.FromHours(-24)),
        //new QuickRange(QuickRangeKey.Last2Days, TimeSpan.FromDays(-2)),
        //new QuickRange(QuickRangeKey.Last7Days, TimeSpan.FromDays(-7)),
        //new QuickRange(QuickRangeKey.Last30Days, TimeSpan.FromDays(-30)),
        //new QuickRange(QuickRangeKey.Last6Months, TimeSpan.FromDays(-180)),
        //new QuickRange(QuickRangeKey.Last1Year, TimeSpan.FromDays(-365)),
        //new QuickRange(QuickRangeKey.Yesterday),
        //new QuickRange(QuickRangeKey.DayBeforeYesterday),
        //new QuickRange(QuickRangeKey.DayLastWeek),
        //new QuickRange(QuickRangeKey.LastWeek),
        //new QuickRange(QuickRangeKey.LastMonth),
        //new QuickRange(QuickRangeKey.LastQuarter),
        //new QuickRange(QuickRangeKey.LastYear),
        //new QuickRange(QuickRangeKey.Today),
        //new QuickRange(QuickRangeKey.TodaySoFar),
        //new QuickRange(QuickRangeKey.ThisWeek),
        //new QuickRange(QuickRangeKey.ThisWeekSoFar),
        //new QuickRange(QuickRangeKey.ThisMonth),
        //new QuickRange(QuickRangeKey.ThisMonthSoFar),
        //new QuickRange(QuickRangeKey.ThisYear),
        //new QuickRange(QuickRangeKey.ThisYearSoFar),
        new QuickRange(QuickRangeKey.Off, TimeSpan.Zero, true),
    };

    private List<IntervalItem> _intervalList = new()
    {
        new IntervalItem("Off", TimeSpan.Zero),
        new IntervalItem("10s", TimeSpan.FromSeconds(10)),
        new IntervalItem("30s", TimeSpan.FromSeconds(30)),
        new IntervalItem("1m", TimeSpan.FromMinutes(1)),
        new IntervalItem("5m", TimeSpan.FromMinutes(5)),
        new IntervalItem("15m", TimeSpan.FromMinutes(15)),
        new IntervalItem("30m", TimeSpan.FromMinutes(30)),
        new IntervalItem("1h", TimeSpan.FromHours(1)),
        new IntervalItem("2h", TimeSpan.FromHours(2)),
        new IntervalItem("1d", TimeSpan.FromDays(1)),
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await base.OnAfterRenderAsync(firstRender);
            await GetOffset();
            if (DefaultQuickRange is not null)
            {
                _quickRange = _quickRangeItems.FirstOrDefault(item => item.Key == DefaultQuickRange) ?? s_internalDefaultQuickRange;
            }

            _selectedQuickRangeKey = _quickRange.Key;

            if (_quickRange.TryGetRange(Offset, out var value))
            {
                _startDateTime = value.start;
                _endDateTime = value.end;
            }
            await UpdateRangeDateTimeToLatest();
            StateHasChanged();
        }
    }

    private async Task OnTimeZoneInfoChange(TimeZoneInfo timeZoneInfo)
    {
        JsInitVariables.TimezoneOffset = timeZoneInfo.BaseUtcOffset;       
        Offset = JsInitVariables.TimezoneOffset;
        if (DefaultQuickRange is not null)
        {
            _quickRange = _quickRangeItems.FirstOrDefault(item => item.Key == DefaultQuickRange) ?? s_internalDefaultQuickRange;
        }

        _selectedQuickRangeKey = _quickRange.Key;

        if (_quickRange.TryGetRange(Offset, out var value))
        {
            _startDateTime = value.start;
            _endDateTime = value.end;
        }
       
        if (OnTimeZoneUpdate.HasDelegate)
            await OnTimeZoneUpdate.InvokeAsync(timeZoneInfo);
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (DefaultQuickRange is not null)
        {
            _quickRange = _quickRangeItems.FirstOrDefault(item => item.Key == DefaultQuickRange) ?? s_internalDefaultQuickRange;
        }

        _selectedQuickRangeKey = _quickRange.Key;

        if (_quickRange.TryGetRange(Offset, out var value))
        {
            _startDateTime = value.start;
            _endDateTime = value.end;
        }
    }

    private async Task GetOffset()
    {
        Offset = JsInitVariables.TimezoneOffset;
    }

    private async Task UpdateRangeDateTimeToLatest(bool autoUpdate = false)
    {
        if (_quickRange.TryGetRange(_endDateTime.Offset, out var value))
        {
            _startDateTime = value.start;
            _endDateTime = value.end;
        }

        if (OnUpdate.HasDelegate)
        {
            if (autoUpdate)
            {
                await OnAutoUpdate.InvokeAsync((_startDateTime, _endDateTime));
            }
            else
            {

                await OnUpdate.InvokeAsync((_startDateTime, _endDateTime));
            }
        }
    }

    private async Task OnAbsoluteDateTimeUpdated()
    {
        _selectedQuickRangeKey = QuickRangeKey.Off;

        if (OnUpdate.HasDelegate)
        {
            await OnUpdate.InvokeAsync((_startDateTime, _endDateTime));
        }
    }

    private async Task OnRelatedTimeSpanSelected(QuickRange item)
    {
        _quickRange = item;
        await UpdateRangeDateTimeToLatest();
    }

    private void OnIntervalSelected(IntervalItem item)
    {
        if (item.TimeSpan == TimeSpan.Zero)
        {
            _timer?.Stop();
            return;
        }

        if (_timer == null)
        {
            _timer = new()
                {
                    Interval = item.TimeSpan.TotalMilliseconds
                };

            _timer.Elapsed += TimerOnElapsed;
        }
        else
        {
            _timer.Stop();
            _timer.Interval = item.TimeSpan.TotalMilliseconds;
        }

        _timer.Start();
    }

    private void TimerOnElapsed(object? sender, ElapsedEventArgs e)
    {
        _ = UpdateRangeDateTimeToLatest(true);
        InvokeAsync(StateHasChanged);
    }

    private Task Refresh() => UpdateRangeDateTimeToLatest();

    public void Dispose()
    {
        _timer?.Dispose();
    }

    private record IntervalItem(string Text, TimeSpan TimeSpan);

}