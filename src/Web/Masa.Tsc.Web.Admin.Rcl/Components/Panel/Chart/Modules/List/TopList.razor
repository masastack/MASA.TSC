@namespace Masa.Tsc.Web.Admin.Rcl.Components

<MCard Class="@($"d-flex flex-column full-height {Class}")">
    <MCardTitle>
        <PanelTooltip Title="@Value.Title" Description="@Value.Description" />
    </MCardTitle>
    @{
        var options = Value.GetTopListOption();
        var multiple = options.Count > 1;
    }
    @if (options.Any() is false)
    {
        <MCardText Class="d-flex" Style="@("height:calc(100% - 62px)")">
            <div class="ma-auto">@I18n.T("No Data")</div>
        </MCardText>
    }
    else
    {
        <MCardText Class="flex-grow-1 overflow-y" Style="@("height:calc(100% - 62px)")">
            <MList>
                @foreach (var item in options)
                {
                    <MListItem Class="px-0" Dense OnClick="() => ToDashboardConfiguration(item.Href)">
                        <MListItemAvatar Style="background: #F4F1FF;border-radius: 10px;">
                            <span>@item.Value</span>
                        </MListItemAvatar>
                        <MListItemContent>
                            <MListItemTitle Class="d-flex justify-space-between">
                                <MLabel Class="body2 regular2--text d-inline-block text-truncate">@(multiple ? item.Text : (Value.Metrics[0].DisplayName ?? item.Text))</MLabel>
                            </MListItemTitle>
                            <MListItemSubtitle>
                                    <MProgressLinear Height="8" Color="@(multiple?GetTextColorStyle(options.IndexOf(item)):(Value.Metrics[0].Color ?? GetTextColorStyle(options.IndexOf(item))))" Rounded Value="@item.Value"></MProgressLinear>
                            </MListItemSubtitle>
                        </MListItemContent>
                    </MListItem>
                }
            </MList>
        </MCardText>
    }

</MCard>

@code {
    string[] _defaultColors = new string[] { "#5470c6", "#91cc75", "#fac858", "#ee6666", "#73c0de", "#3ba272", "#fc8452", "#9a60b4", "#ea7ccc" };

    [Parameter]
    public ITopListPanelValue Value { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [CascadingParameter]
    public I18n I18n { get; set; }

    [Parameter]
    public string Class { get; set; }

    string GetTextColorStyle(int index)
    {
        if (index > _defaultColors.Count())
        {
            index = index % _defaultColors.Count();
        }
        return _defaultColors[index];
    }

    void ToDashboardConfiguration(string href)
    {
        //NavigationManager.NavigateTo(href); //todo: remove annotate
    }
}
