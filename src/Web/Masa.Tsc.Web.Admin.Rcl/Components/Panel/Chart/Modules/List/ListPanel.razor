@inherits TscComponentBase

@if (Value.ListType == ListTypes.TopList)
{
    <TopList Value=Value Class="@Class" />
}
else
{
    <Table Value="Value" Class="@Class" />
}

@code {
    ListTypes? _lastListType { get; set; }

    string? _oldKey;

    bool _shouldRender;

    string jumpId { get; set; }

    string jumpName { get; set; }

    List<string> services { get; set; }

    [Parameter]
    public ITablePanelValue Value { get; set; }

    [CascadingParameter]
    public ConfigurationRecord ConfigurationRecord { get; set; }

    [Parameter]
    public bool IsChartDataReady { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (_lastListType != Value.ListType)
        {
            if (Value.ListType != ListTypes.TopList && _oldKey != ConfigurationRecord.Key)
            {
                services = await GetServiceNames() ?? new();
            }
            _lastListType = Value.ListType;
            jumpId = await GetJumpId();
            jumpName = GetJumpName();
            _shouldRender = true;
        }

        if (IsChartDataReady && _shouldRender)
        {
            _shouldRender = false;
            await SetOption();
        }
    }

    async Task SetOption()
    {
        if (Value.ListType is ListTypes.TopList)
        {
            Value.SetTopListOption(jumpId);
        }
        else
        {
            services = await GetServiceNames() ?? new();
            Value.SetTableOption(services, jumpName, jumpId);
        }
    }

    async Task<List<string>> GetServiceNames()
    {
        return await base.ApiCaller.MetricService.GetValues(new RequestMetricListDto
        {
            Service = ConfigurationRecord.Service,
            Instance = ConfigurationRecord.Instance,
            Endpoint = ConfigurationRecord.ConvertEndpoint,
            Type = GetMetricValueType()
        });
    }

    async Task<string> GetJumpId()
    {
        var data = await base.ApiCaller.InstrumentService.GetLinkAsync(GetMetricValueType());
        return data.InstrumentId?.ToString() ?? "";
    }

    MetricValueTypes GetMetricValueType()
    {
        MetricValueTypes type = default;
        switch (Value.ListType)
        {
            case ListTypes.ServiceList:
                type = MetricValueTypes.Service;
                break;
            case ListTypes.InstanceList:
                type = MetricValueTypes.Instance;
                break;
            case ListTypes.EndpointList:
                type = MetricValueTypes.Endpoint;
                break;
            case ListTypes.TopList:
                type = MetricValueTypes.TopList;
                break;
            default:
                break;
        }

        return type;
    }

    string GetJumpName()
    {
        var jumpName = "";
        switch (Value.ListType)
        {
            case ListTypes.ServiceList:
                jumpName = "service_name";
                break;
            case ListTypes.InstanceList:
                jumpName = "exported_instance";
                break;
            case ListTypes.EndpointList:
                jumpName = "http_target";
                break;
            default:
                break;
        }
        return jumpName;
    }
}
