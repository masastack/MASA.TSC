@inherits TscComponentBase

@if (Value.ListType == ListTypes.TopList)
{
    <TopList Value=Value Class="@Class" />
}
else
{
    <Table Value="Value" IsEdit=IsEdit Class="@Class" />
}

@code {

    [Parameter]
    public ITablePanelValue Value { get; set; }

    [Parameter]
    public bool IsEdit { get; set; }

    [Parameter]
    public string ServiceName { get; set; }

    public string? LastKey { get; set; }

    ListTypes? LastListType { get; set; }

    string? LastServiceName { get; set; }

    string jumpId { get; set; }

    string jumpName { get; set; }

    List<string> services { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (LastListType != Value.ListType)
        {
            LastListType = Value.ListType;
            jumpId = await GetJumpId();
            jumpName = GetJumpName();
        }

        if (Value.ListType != ListTypes.TopList && LastServiceName != ServiceName)
        {
            LastServiceName = ServiceName;
            services = await GetServiceNames() ?? new();
        }

        if (LastKey != Value.DataKey)
        {
            LastKey = Value.DataKey;
            await SetOption();
        }

        //if ((LastListType is null || LastListType != Value.ListType) && Value.ListType is not ListTypes.TopList
        //|| (string.IsNullOrEmpty(LastServiceName) || !string.Equals(LastServiceName, ServiceName)) && (Value.ListType is ListTypes.EndpointList || Value.ListType is ListTypes.InstanceList))
        //    services = await GetServiceNames() ?? new();

        //LastServiceName = ServiceName;
        //LastListType = Value.ListType;

        //if (Value.ListType is ListTypes.TopList)
        //    Value.SetTopListOption(jumpId);
        //else
        //    Value.SetTableOption(services, jumpName, jumpId);
    }

    async Task SetOption()
    {
        if (Value.ListType is ListTypes.TopList)
        {
            Value.SetTopListOption(jumpId);
        }
        else
        {
            services = await GetServiceNames() ?? new();
            Value.SetTableOption(services, jumpName, jumpId);
        }
    }

    async Task<List<string>> GetServiceNames()
    {
        return await base.ApiCaller.MetricService.GetValues(new RequestMetricListDto
        {
            Service = ServiceName,
            Type = GetMetricValueType()
        });
    }

    async Task<string> GetJumpId()
    {
        var data = await base.ApiCaller.InstrumentService.GetLinkAsync(GetMetricValueType());
        return data.InstrumentId?.ToString() ?? "";
    }

    MetricValueTypes GetMetricValueType()
    {
        MetricValueTypes type = default;
        switch (Value.ListType)
        {
            case ListTypes.ServiceList:
                type = MetricValueTypes.Service;
                break;
            case ListTypes.InstanceList:
                type = MetricValueTypes.Instance;
                break;
            case ListTypes.EndpointList:
                type = MetricValueTypes.Endpoint;
                break;
            case ListTypes.TopList:
                type = MetricValueTypes.TopList;
                break;
            default:
                break;
        }

        return type;
    }

    string GetJumpName()
    {
        var jumpName = "";
        switch (Value.ListType)
        {
            case ListTypes.ServiceList:
                jumpName = "service_name";
                break;
            case ListTypes.InstanceList:
                jumpName = "exported_instance";
                break;
            case ListTypes.EndpointList:
                jumpName = "http_target";
                break;
            default:
                break;
        }
        return jumpName;
    }
}
