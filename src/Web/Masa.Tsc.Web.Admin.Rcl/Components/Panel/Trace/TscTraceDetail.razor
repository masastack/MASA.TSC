@namespace Masa.Tsc.Web.Admin.Rcl.Components
@using System.Globalization
@inherits TscComponentBase

<style>
    .m-treeview.overflow-y-auto {
    height: calc(100vh - 215px);
    }
</style>

@if (_isLoading)
{
    <MRow>
        <MCol>
            Loading ...
        </MCol>
    </MRow>
}
else
{
    <div class="d-flex">
        <MTreeview Items="@treeData"
                   ItemChildren="item => item.Children"
                   ItemText="item => item.Name"
                   ItemKey="item => item.SpanId"
                   TItem="TraceResponseTree"
                   TKey="string"
                   OpenAll
                   Activatable
                   @bind-Active="actives"
                   OnActiveUpdate="OnActiveUpdate"
                   Class="flex-fill overflow-y-auto"
                   Style="height: calc(100vh - 215px)">
            <LabelContent>
                <MListItem Dense>
                    <MListItemContent>
                        <div class="d-flex align-center">
                            @{
                                int level = context.Item.Level - 1;

                                <div style="min-width:calc(542px - @(level * 24)px)">
                                    @context.Item.Name
                                    @{
                                        if (context.Item.Resource.ContainsKey("service.name"))
                                        {
                                            <div>
                                                @context.Item.Resource["service.name"]
                                                @((RenderFragment)(labelBuilder => RenderItemLabel(labelBuilder, context.Item)))
                                            </div>
                                        }
                                    }
                                </div>
                            }
                            <div class="trace-timelines">
                                @foreach (var timeline in context.Item.Timelines)
                                {
                                    if (timeline.marginLeft > 0)
                                    {
                                        <div style="width: @(timeline.marginLeft * 100)%"></div>
                                    }
                                    <div class="trace-timeline__section" style="width: @(timeline.Percent * 100)%;">
                                        <div class="trace-timeline__background">
                                            <div class="trace-timeline__leaner @(timeline.Render ? "" : "d-none")"></div>
                                        </div>
                                    </div>
                                }
                            </div>
                            <div class="d-inline-block ml-2" style="min-width: 52px;">
                                @FormatDuration(context.Item.Duration)
                            </div>
                        </div>
                    </MListItemContent>
                </MListItem>
            </LabelContent>
        </MTreeview>

        <MDivider Vertical Class="mx-0" />

        @if (_activeTreeItem is not null)
        {
            var detail = _activeTreeItem.ToDictionary(nameof(TraceResponseTree.Children), nameof(TraceResponseTree.Attributes), nameof(TraceResponseTree.Resource), nameof(TraceResponseTree.Timelines), nameof(TraceResponseTree.Level));

            <MCard Width="430" Flat Class="px-6 py-12">
                <MCard>
                    <div></div>
                </MCard>
                <div>
                    <MTabs @bind-Value="tabValue" FixedTabs ShowArrows="false">
                        <MTab>attr(@_activeTreeItem.Attributes.Count)</MTab>
                        <MTab>res(@_activeTreeItem.Resource.Count)</MTab>
                        <MTab>dt(@detail.Count)</MTab>
                        <MTab>logs</MTab>
                    </MTabs>
                    <MTabsItems Value="tabValue">
                        <MTabItem>
                            @((RenderFragment)(dictRender => RenderDictionary(dictRender, _activeTreeItem.Attributes)))
                        </MTabItem>
                        <MTabItem>
                            @((RenderFragment)(dictRender => RenderDictionary(dictRender, _activeTreeItem.Resource)))
                        </MTabItem>
                        <MTabItem>
                            @((RenderFragment)(dictRender => RenderDictionary(dictRender, detail)))
                        </MTabItem>
                        <MTabItem>
                            TODO
                        </MTabItem>
                    </MTabsItems>
                </div>
            </MCard>
        }

    </div>
}

@code {

    private void RenderItemLabel(RenderTreeBuilder __builder, TraceResponseTree item)
    {
        const string dbKey = "db.system";
        const string httpKey = "http.method";

        string? label = null;
        if (item.Attributes.ContainsKey(dbKey))
        {
            label = item.Attributes[dbKey].ToString();
        }
        else if (item.Attributes.ContainsKey(httpKey))
        {
            // label = item.Attributes[httpKey].ToString();
            label = "HTTP";
        }

        if (label is null)
        {
            return;
        }

        <MChip Label XSmall Class="ml-1" Color="#05CD99" Dark>@label</MChip>
    }

    private void RenderDictionary(RenderTreeBuilder __builder, IDictionary<string, object> dictionary)
    {
        @foreach (var item in dictionary)
        {
            string value;
            if (item.Value is DateTime _value)
            {
                value = _value.ToString("yyyy/MM/dd HH:mm:ss.fff");
            }
            else
            {
                value = item.Value.ToString();
            }

            <MListItem Class="pa-0">
                <MListItemContent>
                    <MListItemTitle>@item.Key</MListItemTitle>
                </MListItemContent>
                <MListItemAction Style="max-width: 38%">
                    <EllipsisText TooltipStyle="white-space: pre-wrap;">
                        <ActivatorContent>
                            <MListItemActionText Class="text-truncate text-right"
                                                 Style="width: 100%; cursor: auto;"
                                                 RefBack="@context.Ref"
                                                 @attributes="@context.Attrs">
                                @value
                            </MListItemActionText>
                        </ActivatorContent>
                        <ChildContent>
                            @value
                        </ChildContent>
                    </EllipsisText>
                </MListItemAction>
            </MListItem>
        }
    }

}
