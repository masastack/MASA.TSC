@namespace Masa.Tsc.Web.Admin.Rcl.Components
@using System.Timers;
@implements IDisposable

<div class="d-inline-flex align-center rounded px-4" style="border:1px solid rgba(0,0,0,.38);height: 40px;background-color:white;">
    <DateTimeRangePicker @bind-StartDateTime="_startDateTime"
                         @bind-EndDateTime="_endDateTime"
                         OnConfirm="OnAbsoluteDateTimeUpdated">
    </DateTimeRangePicker>

    <MDivider Vertical Class="mx-2"></MDivider>

    <Dropdown @bind-Value="_relatedTimeSpanText"
              Items="_relatedItems"
              ItemText="item => item.Text"
              ItemValue="item => item.Text"
              TItem="RelatedItem"
              TValue="string"
              OnItemClick="OnRelatedTimeSpanSelected"
              OffsetY
              NudgeBottom="@((StringNumber)8)">
        <ActivatorContent>
            <MButton Small @attributes="@context.Attrs" Text>
                @_relatedTimeSpanText
                <MIcon Right>mdi-menu-down</MIcon>
            </MButton>
        </ActivatorContent>
    </Dropdown>

    <MDivider Vertical Class="mx-2" />

    <Dropdown Items="_intervalList"
              ItemValue="item => item.Text"
              ItemText="item => item.Text"
              @bind-Value="_interval"
              TItem="IntervalItem"
              TValue="string"
              OnItemClick="OnIntervalSelected">
        <PrependContent>
            <MButton Icon Small OnClick="Refresh">
                <MIcon Small>mdi-refresh</MIcon>
            </MButton>
        </PrependContent>
        <ActivatorContent>
            @{
                var exists = _interval is not null && _interval != "Off";
                <MButton Text Small Icon="!exists"
                         @attributes="@context.Attrs">
                    @if (exists)
                    {
                        <span class="mr-1">@_interval</span>
                    }
                    <MIcon Small Right="@exists">mdi-menu-down</MIcon>
                </MButton>
            }
        </ActivatorContent>
    </Dropdown>
</div>

@code {

    [Parameter]
    public EventCallback<(DateTimeOffset, DateTimeOffset)> OnUpdate { get; set; }

    private static readonly RelatedItem s_defaultRelatedTimeSpan = new("off", TimeSpan.FromHours(-1));

    private DateTimeOffset _startDateTime = DateTimeOffset.UtcNow.AddHours(-1);
    private DateTimeOffset _endDateTime = DateTimeOffset.UtcNow;
    private string _relatedTimeSpanText = "off";
    private RelatedItem _relatedTimeSpan = s_defaultRelatedTimeSpan;
    private string? _interval = "off";

    private List<RelatedItem> _relatedItems = new()
    {
        s_defaultRelatedTimeSpan,
        new RelatedItem("last-5-min", TimeSpan.FromMinutes(-5)),
        new RelatedItem("last-15-min", TimeSpan.FromMinutes(-15)),
        new RelatedItem("last-30-min", TimeSpan.FromMinutes(-30)),
        new RelatedItem("last-1-hours", TimeSpan.FromHours(-1)),
        new RelatedItem("last-3-hours", TimeSpan.FromHours(-3)),
        new RelatedItem("last-6-hours", TimeSpan.FromHours(-6)),
        new RelatedItem("last-12-hours", TimeSpan.FromHours(-12)),
        new RelatedItem("last-24-hours", TimeSpan.FromHours(-24)),
        new RelatedItem("last-2-days", TimeSpan.FromDays(-2)),
    };

    private List<IntervalItem> _intervalList = new()
    {
        new IntervalItem("Off", TimeSpan.Zero),
        new IntervalItem("10s", TimeSpan.FromSeconds(10)),
        new IntervalItem("30s", TimeSpan.FromSeconds(30)),
        new IntervalItem("1m", TimeSpan.FromMinutes(1)),
        new IntervalItem("5m", TimeSpan.FromMinutes(5)),
        new IntervalItem("15m", TimeSpan.FromMinutes(15)),
        new IntervalItem("30m", TimeSpan.FromMinutes(30)),
        new IntervalItem("1h", TimeSpan.FromHours(1)),
        new IntervalItem("2h", TimeSpan.FromHours(2)),
        new IntervalItem("1d", TimeSpan.FromDays(1)),
    };

    private Timer? _timer;

    private async Task UpdateRangeDateTimeToLatest()
    {
        _endDateTime = DateTimeOffset.UtcNow.ToOffset(_endDateTime.Offset);
        _startDateTime = _endDateTime.Add(_relatedTimeSpan.TimeSpan);

        if (OnUpdate.HasDelegate)
        {
            await OnUpdate.InvokeAsync((_startDateTime, _endDateTime));
        }
    }

    private async Task OnAbsoluteDateTimeUpdated()
    {
        _relatedTimeSpan = s_defaultRelatedTimeSpan;
        _relatedTimeSpanText = "off";

        if (OnUpdate.HasDelegate)
        {
            await OnUpdate.InvokeAsync((_startDateTime, _endDateTime));
        }
    }

    private async Task OnRelatedTimeSpanSelected(RelatedItem item)
    {
        _relatedTimeSpan = item;
        await UpdateRangeDateTimeToLatest();
    }

    private void OnIntervalSelected(IntervalItem item)
    {
        if (item.TimeSpan == TimeSpan.Zero)
        {
            _timer?.Stop();
            return;
        }

        if (_timer == null)
        {
            _timer = new()
            {
                Interval = item.TimeSpan.TotalMilliseconds
            };

            _timer.Elapsed += TimerOnElapsed;
        }
        else
        {
            _timer.Stop();
            _timer.Interval = item.TimeSpan.TotalMilliseconds;
        }

        _timer.Start();
    }

    private void TimerOnElapsed(object? sender, ElapsedEventArgs e)
    {
        _ = UpdateRangeDateTimeToLatest();
        InvokeAsync(StateHasChanged);
    }

    private Task Refresh() => UpdateRangeDateTimeToLatest();

    public void Dispose()
    {
        _timer?.Dispose();
    }

    private record IntervalItem(string Text, TimeSpan TimeSpan);

    private record RelatedItem(string Text, TimeSpan TimeSpan);

}
