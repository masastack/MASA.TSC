@namespace Masa.Tsc.Web.Admin.Rcl.Components
@inherits TscComponentBase
@implements IDisposable

<MCard Class="pa-2" Style="background-color:#F6F8FD">
    <MCardText>
        <MRow>
            <MCol Md="12">
                <STextField BackgroundColor="white" @bind-Value="Value.Name" Label="指标名称" />
            </MCol>
            <MCol Md="12">
                <STextField BackgroundColor="white" @bind-Value="Value.Range" Label="取值范围" />
            </MCol>
            <MCol Md="12">
                <STextField BackgroundColor="white" @bind-Value="Value.Icon" Label="图标" />
            </MCol>
            <MCol Md="12">
                <STextField BackgroundColor="white" @bind-Value="Value.Unit" Label="单位" />
            </MCol>
        </MRow>
    </MCardText>
    <MCardActions Class="d-flex justify-space-between">
        <SColorGroup @bind-Value="Value.Color" Colors='new List<string>{"#4318FF","#05CD99","#FFB547","#37A7FF","#FF5252"}' />
        <MIcon OnClick="OnDeleteAsync" Color="red">mdi-delete</MIcon>
    </MCardActions>
</MCard>

@code {
    [Parameter]
    public TableFieldItemModel Value { get; set; }

    [Parameter]
    public EventCallback<TableFieldItemModel> ValueChanged { get; set; }

    [CascadingParameter]
    public TableFieldMetrics TableFieldMetrics { get; set; }

    protected override void OnInitialized()
    {
        Value.PropertyChanged += PropertyChanged;
        base.OnInitialized();
    }

    private void PropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        TableFieldMetrics.ItemsChanged.InvokeAsync(TableFieldMetrics.Items);
    }

    private async Task OnDeleteAsync()
    {
        await OnCallParent(OperateCommand.Remove, Value);
    }

    public new void Dispose()
    {
        Value.PropertyChanged -= PropertyChanged;
        base.Dispose();
    }
}