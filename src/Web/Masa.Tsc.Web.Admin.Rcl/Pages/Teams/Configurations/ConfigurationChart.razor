@page "/teamDetail/configuration/chart/{projectId}/{teamId}/{panelId}/{serviceName}"
@inherits TscComponentBase

<PageTitle>@T("Configure Chart")</PageTitle>

@if (Panel is not null)
{
    <ChartPanelConfiguration Value="Panel" ConfigurationRecord="ConfigurationRecord" />
}

@code {
    [Inject]
    TeamDetailConfigurationRecord ConfigurationRecord { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [Parameter]
    public string? ServiceName { get; set; }

    [Parameter]
    public string ProjectId { get; set; }

    [Parameter]
    public string TeamId { get; set; }

    [Parameter]
    public string PanelId { get; set; }

    UpsertChartPanelDto? Panel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ConfigurationRecord.Service = ServiceName;
        ConfigurationRecord.ProjectId = ProjectId;
        ConfigurationRecord.TeamId = Guid.Parse(TeamId);
        if(ConfigurationRecord.Panels.Any() is false)
        {
            ConfigurationRecord.Panels = await ApiCaller.InstrumentService.GetTeamInstraumentDetailAsync();
            ConfigurationRecord.Panels.ConvertToConfigurationFormat();
        }
    }

    protected override async Task OnParametersSetAsync()
    {     
        if (string.IsNullOrEmpty(PanelId) is false)
        {
            ConfigurationRecord.PanelId = PanelId;
            Panel = FindPanel(ConfigurationRecord.Panels) as UpsertChartPanelDto ?? throw new UserFriendlyException(T("Find panel error"));
        }
    }

    UpsertPanelDto? FindPanel(List<UpsertPanelDto> panels)
    {
        foreach (var panel in panels)
        {
            if (panel.Id == Guid.Parse(PanelId!))
            {
                return panel;
            }
            if (panel.ChildPanels.Any())
            {
                var data = FindPanel(panel.ChildPanels);
                if (data is not null) return data;
            }
        }

        return default;
    }
}
