@page "/dashboard"
@inherits TscComponentBase

<PageTitle>@T("Dashboard")</PageTitle>

<AutoHeight>
    <HeaderContent>
        <div class="d-flex mb-6">
            <SLabeledRadioGroup TValue="Modes" @bind-Value=Mode Dense ActiveClass="fill-background" Class="mr-6 my-auto white">
                <SLabeledRadio Value="Modes.Folder">
                    <SIcon Color="@(Mode == Modes.Folder ? "primary" : "emphasis2")">@IconConstants.Folder</SIcon>
                </SLabeledRadio>
                <SLabeledRadio Value="Modes.Table">
                    <SIcon Color="@(Mode == Modes.Table ? "primary" : "emphasis2")">@IconConstants.List</SIcon>
                </SLabeledRadio>
            </SLabeledRadioGroup>
            @if (Mode is Modes.Folder)
            {
                <MButton Depressed Text Outlined Class="mr-6 my-auto regular--text body2 white" OnClick="() => ExpandAll = !ExpandAll">
                    @(ExpandAll ? T("Close all") : T("Expend all"))
                </MButton>
            }
            <SearchTextField @bind-Value="Search" Clearable FillBackground=false Class="my-auto" Style="flex:none;width: 300px !important;" />
            <MSpacer />
            <SButton OnClick="OpenAddFolderDialog" Small Class="mr-6 my-auto" Style="min-width:108px !important;">@T("Add folder")</SButton>
            <SButton OnClick="OpenAddDashboardDialog" Small Class="my-auto" Style="min-width:140px !important;">@T("Add dashboard")</SButton>
        </div>
    </HeaderContent>
    <AutoHeightContent>
        <DefaultCard Class="px-2">
            @if (Mode is Modes.Table)
            {
                <SDataTable Items="Dashboards"
                            TItem="DashboardDto"
                            ItemsPerPage="PageSize"
                            Headers="GetHeaders()"
                            Height="@("calc(100vh - 289px)")">
                    <HeaderColContent Context="header">
                        <span>@header.Text</span>
                    </HeaderColContent>
                    <ItemColContent>
                        @switch (context.Header.Value)
                        {
                            case nameof(DashboardDto.Name):
                                <div class="hover-pointer" @onclick="()=> NavigateToConfiguration(context.Item)">@context.Item.Name</div>
                                break;
                            case nameof(DashboardDto.Folder):
                                <div >@context.Item.Folder.Name</div>
                                break;
                            case "Action":
                                <div class="d-flex">
                                    <SButton Icon Class="mr-4"><SIcon Tooltip="@T("Edit")" OnClick="() => OpenUpdateDashboardDialog(context.Item)" Style="color: #4318FF !important;">@IconConstants.Update</SIcon></SButton>
                                    <SButton Icon Color="red" OnClick="async () => await OpenRemoveDashboardDialogAsync(context.Item)"><SIcon Tooltip="@T("Remove")" Style="color:#F44336 !important;">@IconConstants.Remove</SIcon></SButton>
                                </div>
                                break;
                            default:
                                <span class="subtitle">@context.Value</span>
                                break;
                        }
                    </ItemColContent>
                </SDataTable>
            }
            else
            {
                <MList Height="@("calc(100vh - 289px)")" Class="overflow-auto folder">
                    @foreach (var folder in Folders)
                    {
                        <MListGroup PrependIcon="@(IconConstants.Folder)"
                                    NoAction
                                    @bind-Value=folder.IsActive>
                            <ActivatorContent>
                                <MListItemContent>
                                    <MListItemTitle Class="h8">@folder.Name</MListItemTitle>
                                </MListItemContent>
                            </ActivatorContent>
                            <AppendIconContent>
                                <SButton Icon OnClick="() => OpenUpdateFolderDialog(folder)" Class="mr-4" StopPropagation><SIcon Tooltip="@T("Edit")" Style="transform: none !important">@IconConstants.Update</SIcon></SButton>
                                <SButton Icon Color="red" Class="mr-10" OnClick="async () => await OpenRemoveFolderDialogAsync(folder)" StopPropagation><SIcon Tooltip="@T("Remove")" Color="red" Style="transform: none !important">@IconConstants.Remove</SIcon></SButton>
                                <SIcon Size="28" Color="@(folder.IsActive ? "primary" : "")">@IconConstants.Down</SIcon>
                            </AppendIconContent>
                            <ChildContent>
                                @foreach (var dashboard in folder.Dashboards)
                                {
                                    <MHover>
                                        <MListItem @attributes="@context.Attrs" Link Class="ml-n6" OnClick="()=> NavigateToConfiguration(dashboard)">
                                            <MListItemContent>
                                                <MListItemTitle Class="body emphasis2--text">
                                                    @dashboard.Name
                                                </MListItemTitle>
                                            </MListItemContent>
                                            <MListItemAction>
                                                <SButton StopPropagation Icon Class="mr-4" Style="@(context.Hover?"":"visibility: hidden")" OnClick="() => OpenUpdateDashboardDialog(dashboard)"><SIcon Tooltip="@T("Edit")">@IconConstants.Update</SIcon></SButton>
                                                <SButton StopPropagation Icon Color="red" Style="@(context.Hover?"":"visibility: hidden")" OnClick="async () => await OpenRemoveDashboardDialogAsync(dashboard)"><SIcon Tooltip="@T("Remove")" Color="red">@IconConstants.Remove</SIcon></SButton>
                                            </MListItemAction>
                                        </MListItem>
                                        @if (folder.Dashboards.Last() != dashboard)
                                        {
                                            <div class="px-4" style="background: rgba(246, 248, 253, 0.5);@(!context.Hover?"":"visibility: hidden")">
                                                <div style="height: 1px;background:#E4E8F3;" />
                                            </div>
                                        }
                                    </MHover>
                                }
                            </ChildContent>
                        </MListGroup>
                        @if (Folders.Last() != folder)
                        {
                            <div class="px-4" style="background: rgba(246, 248, 253, 0.5);@(folder.IsActive?"visibility: hidden":"")">
                                <div style="height: 1px;background:#E4E8F3;" />
                            </div>
                        }
                    }
                </MList>
            }
        </DefaultCard>
    </AutoHeightContent>
    <FooterContent>
        <SPagination Class="mt-5" @bind-Page="Page" @bind-PageSize=PageSize Total=Total />
    </FooterContent>
</AutoHeight>

<AddFloderDialog @bind-Visible="AddFolderDialogVisible" OnSubmitSuccess=GetFoldersAsync />
<AddDashboardDialog @bind-Visible="AddDashboardDialogVisible" OnSubmitSuccess=GetFoldersAsync />
<UpdateDashboardDialog @bind-Visible="UpdateDashboardDialogVisible" DashboardId=CurrentDashboardId OnSubmitSuccess=GetFoldersAsync />
<UpdateFolderDialog @bind-Visible="UpdateFolderDialogVisible" FolderId=CurrentFolderId OnSubmitSuccess=GetFoldersAsync />