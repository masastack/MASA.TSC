@page "/dashboard"
@inherits TscComponentBase

<AutoHeight>
    <HeaderContent>
        <div class="d-flex mb-6">
            <SLabeledRadioGroup TValue="Modes" @bind-Value=Mode Dense Class="mr-6" Style="border-width:1px;border-style: double;border-color:rgb(255 255 255 / 70%);">
                <SLabeledRadio Value="Modes.Folder">
                    <SIcon>@IconConstants.Folder</SIcon>
                </SLabeledRadio>
                <SLabeledRadio Value="Modes.Table">
                    <SIcon>@IconConstants.List</SIcon>
                </SLabeledRadio>
            </SLabeledRadioGroup>
            <SearchTextField @bind-Value="Search" Clearable FillBackground=false Style="flex:none;width: 300px !important;" />
            <MSpacer />
            <SButton Icon OnClick=RefreshAsync Class="mr-6"><SIcon Tooltip="@T("Refresh")" Size=24>@IconConstants.Refresh</SIcon></SButton>
            <SButton OnClick="OpenAddFolderDialog" Small Class="mr-6" Style="min-width:108px !important;">@T("Add folder")</SButton>
            <SButton OnClick="OpenAddDashboardDialog" Small Style="min-width:140px !important;">@T("Add dashboard")</SButton>
        </div>
    </HeaderContent>
    <AutoHeightContent>
        <DefaultCard>
            @if (Mode is Modes.Table)
            {
                <SDataTable Items="Dashboards"
                            TItem="DashboardDto"
                            ItemsPerPage="PageSize"
                            Headers="GetHeaders()"
                            Height="@("calc(100vh - 289px)")">
                    <HeaderColContent Context="header">
                        <span>@header.Text</span>
                    </HeaderColContent>
                    <ItemColContent>
                        @switch (context.Header.Value)
                        {
                            case nameof(DashboardDto.Folder):
                                <span>@context.Item.Folder.Name</span>
                                break;
                            case nameof(DashboardDto.IsRoot):
                                <span>@(context.Item.IsRoot ? T("Yes") : T("No"))</span>
                                break;
                            case "Action":
                                <div class="d-flex">
                                    <SButton Text Style="min-width:150px !important;" OnClick="async () => await SwitchRootAsync(context.Item)">@T(context.Item.IsRoot ? "Not set as root" : "Set as root")</SButton>
                                    <SButton Icon><SIcon Tooltip="@T("Edit")" OnClick="() => OpenUpdateDashboardDialog(context.Item)">@IconConstants.Update</SIcon></SButton>
                                    <SButton Icon Color="red" OnClick="async () => await OpenRemoveDashboardDialogAsync(context.Item)"><SIcon Tooltip="@T("Remove")" Color="red">@IconConstants.Remove</SIcon></SButton>
                                </div>
                                break;
                            default:
                                <span class="subtitle">@context.Value</span>
                                break;
                        }
                    </ItemColContent>
                </SDataTable>
            }
            else
            {
                <MList Height="@("calc(100vh - 289px)")" Class="overflow-auto">
                    @foreach (var folder in Folders)
                    {
                        <MListGroup PrependIcon="@IconConstants.Folder"
                                    NoAction
                                    @bind-Value=folder.ISActive>
                            <ActivatorContent>
                                <MListItemContent>
                                    <MListItemTitle Class="h8">@folder.Name</MListItemTitle>
                                </MListItemContent>
                            </ActivatorContent>
                            <ChildContent>
                                @foreach (var dashboard in folder.Dashboards)
                                {
                                    <MListItem Link Class="ml-n6">
                                        <MListItemContent>
                                            <MListItemTitle Class="body emphasis2--text">@dashboard.Name</MListItemTitle>
                                        </MListItemContent>
                                        <MListItemAction>
                                            <SButton Text Style="min-width:150px !important;" OnClick="async () => await SwitchRootAsync(dashboard)">@T(dashboard.IsRoot ? "Not set as root" : "Set as root")</SButton>
                                            <SButton Icon OnClick="() => OpenUpdateDashboardDialog(dashboard)"><SIcon Tooltip="@T("Edit")">@IconConstants.Update</SIcon></SButton>
                                            <SButton Icon Color="red" OnClick="async () => await OpenRemoveDashboardDialogAsync(dashboard)"><SIcon Tooltip="@T("Remove")" Color="red">@IconConstants.Remove</SIcon></SButton>
                                        </MListItemAction>
                                    </MListItem>
                                }
                            </ChildContent>
                        </MListGroup>
                    }
                </MList>
            }
        </DefaultCard>
    </AutoHeightContent>
    <FooterContent>
        <SPagination Class="mt-5" @bind-Page="Page" @bind-PageSize=PageSize Total=Total />
    </FooterContent>
</AutoHeight>

<AddFloderDialog @bind-Visible="AddFolderDialogVisible" OnSubmitSuccess=GetFoldersAsync />
<AddDashboardDialog @bind-Visible="AddDashboardDialogVisible" OnSubmitSuccess=GetFoldersAsync />
<UpdateDashboardDialog @bind-Visible="UpdateDashboardDialogVisible" DashboardId=CurrentDashboardId OnSubmitSuccess=GetFoldersAsync />