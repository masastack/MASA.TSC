@page "/dashboard/configuration/chart/{panelId}/{dashboardId}/{serviceName?}/{instanceName?}/{endpointName?}"
@inherits TscComponentBase

<PageTitle>@T("Configure Chart")</PageTitle>

@if (Panel is not null)
{
    <CascadingValue Value="ConfigurationRecord" IsFixed>
        <ChartPanelConfiguration Value="Panel" />
    </CascadingValue>
}

@code {
    [Inject]
    ConfigurationRecord ConfigurationRecord { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [Parameter]
    public string? DashboardId { get; set; }

    [Parameter]
    public string? ServiceName { get; set; }

    [Parameter]
    public string? InstanceName { get; set; }

    [Parameter]
    public string? EndpointName { get; set; }

    [Parameter]
    public string PanelId { get; set; }

    UpsertChartPanelDto? Panel { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        ConfigurationRecord.Service = ServiceName;
        ConfigurationRecord.Instance = InstanceName;
        ConfigurationRecord.Endpoint = EndpointName;       
        if (string.IsNullOrEmpty(DashboardId) is false && ConfigurationRecord.DashboardId != DashboardId)
        {
            ConfigurationRecord.DashboardId = DashboardId;
            await GetPanelsAsync();
        }
        if (string.IsNullOrEmpty(PanelId) is false)
        {
            ConfigurationRecord.PanelId = PanelId;
            Panel = FindPanel(ConfigurationRecord.Panels) as UpsertChartPanelDto ?? throw new UserFriendlyException(T("Find panel error"));
        }
    }

    async Task GetPanelsAsync()
    {
        ConfigurationRecord.ClearPanels();
        var detail = await ApiCaller.InstrumentService.GetDetailAsync(Guid.Parse(ConfigurationRecord.DashboardId));
        if (detail is not null)
        {
            ConfigurationRecord.ModelType = Enum.Parse<ModelTypes>(detail.Model);
            if (detail.Panels?.Any() is true)
            {
                ConfigurationRecord.Panels.AddRange(detail.Panels);
            }
        }

        if (ConfigurationRecord.Panels.Any() is false) ConfigurationRecord.IsEdit = true;
        Convert(ConfigurationRecord.Panels);
    }

    void Convert(List<UpsertPanelDto> panels, UpsertPanelDto? parentPanel = null)
    {
        panels.ForEach(panel => panel.ParentPanel = parentPanel);
        var chartPanels = panels.Where(panel => panel.PanelType == PanelTypes.Chart).ToList();
        var tabsPanels = panels.Where(panel => panel.PanelType == PanelTypes.Tabs).ToList();
        var tabItemPanels = panels.Where(panel => panel.PanelType == PanelTypes.TabItem).ToList();
        panels.RemoveAll(panel => panel.PanelType == PanelTypes.Chart || panel.PanelType == PanelTypes.Tabs || panel.PanelType == PanelTypes.TabItem);
        panels.AddRange(chartPanels.Select(panel => new UpsertChartPanelDto(Guid.Empty).Clone(panel)));
        panels.AddRange(tabsPanels.Select(panel => new UpsertTabsPanelDto(Guid.Empty).Clone(panel)));
        panels.AddRange(tabItemPanels.Select(panel => new UpsertTabItemPanelDto(parentPanel as UpsertTabsPanelDto).Clone(panel)));
        foreach (var panel in panels)
        {
            if (panel.ChildPanels.Any() is false) continue;
            else Convert(panel.ChildPanels, panel);
        }
    }

    UpsertPanelDto? FindPanel(List<UpsertPanelDto> panels)
    {
        foreach (var panel in panels)
        {
            if (panel.Id == Guid.Parse(PanelId!))
            {
                return panel;
            }
            if (panel.ChildPanels.Any())
            {
                var data = FindPanel(panel.ChildPanels);
                if (data is not null) return data;
            }
        }

        return default;
    }
}
